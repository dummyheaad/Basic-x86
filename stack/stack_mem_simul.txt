mov [esp], 23

0xabcdefaa | 23      <- esp
0xabcdefa9
0xabcdefa8
0xabcdefa7
0xabcdefa6

sub esp, 4

0xabcdefaa | 23
0xabcdefa9 | xx
0xabcdefa8 | xx
0xabcdefa7 | xx
0xabcdefa6 | xx     <- esp

mov [esp], byte 3

0xabcdefaa | 23
0xabcdefa9 | xx
0xabcdefa8 | xx
0xabcdefa7 | xx
0xabcdefa6 | 03     <- esp

add esp, 2

0xabcdefaa | 23
0xabcdefa9 | xx     
0xabcdefa8 | xx     <- esp
0xabcdefa7 | xx
0xabcdefa6 | 03

mov [esp], word 0xaabb

0xabcdefaa | 23
0xabcdefa9 | aa     
0xabcdefa8 | bb     <- esp
0xabcdefa7 | xx
0xabcdefa6 | 03

push 0x23

0xabcdefaa | 23
0xabcdefa9 | aa
0xabcdefa8 | bb
0xabcdefa7 | 23     <- esp
0xabcdefa6 | 03

* xx = belum ada nilai / nilai tidak diketahui
* memory direpresentasikan dalam 8 digit hexa karena sistem
  adalah 32-bit
* asumsi stack menggunakan Little-Endian
  Little-endian: lowest address diisi LSB kemudian sisanya berurutan
                 dari byte terkecil - terbesar
                 gambaran:
                 lowest address -> highest address
                 LSB            -> MSB

  Big-endian: lowest address diisi msb kemudian sisanya berurutan
              dari byte terbesar - terkecil
              gambaran:
              lowest address -> highest address
              MSB            -> LSB

 Contoh: 0xab093267
 Little-Endian:
    0x1000 => 0x67
    0x1001 => 0x32
    0x1002 => 0x09
    0x1003 => 0xab
 Big-Endian:
    0x1000 => 0xab
    0x1001 => 0x09
    0x1002 => 0x32
    0x1003 => 0x67

